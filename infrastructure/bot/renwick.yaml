AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  CleverbotTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: CleverbotTopic
      TopicName: CleverbotTopic 
  GeneralLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GeneralLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: get-secrets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'
  Dispatch:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda
      Role: !GetAtt GeneralLambdaRole.Arn
      Runtime: go1.x
      Timeout: 15
      CodeUri: ./goarts/cmd/renwick/dispatch #../../go/artifacts/cmd/dispatch/lambda
      Environment:
        Variables:
            SLACK_OAUTH: renwick/slack/oauth
            CLEVERBOT_ARN: !Ref CleverbotTopic
      Events:
        SlackApi:
          Type: Api
          Properties: 
            Path: /slack_event
            Method: POST
  Cleverbot:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda
      Role: !GetAtt GeneralLambdaRole.Arn
      ReservedConcurrentExecutions: 1
      Runtime: go1.x
      Timeout: 15
      CodeUri: ./goarts/cmd/renwick/cleverbot
      Environment:
        Variables:
            SLACK_OAUTH: renwick/slack/oauth
            CLEVERBOT_KEY: renwick/cleverbot/apikey
      Events:
        CleverbotEvent:
          Type: SNS
          Properties: 
            Topic: !Ref CleverbotTopic
